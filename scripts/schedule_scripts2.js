// Generated by IcedCoffeeScript 1.2.0p
(function() {
  var __slice = [].slice;

  window.iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  };
  window.__iced_k = function() {};

  $(function() {
    var FullRerender;
    FullRerender = function(schedule) {
      var end_time;
      end_time = schedule[schedule.length - 1].end_time;
      return $("#schedule-container").html(ich.schedule({
        items: schedule,
        scheduleKey: scheduleKey,
        end_time: end_time
      }));
    };
    return $("#check-enable-breaks").click(function() {
      var checked, post_data, response_data, status, url, xhr, ___iced_passed_deferral, __iced_deferrals,
        _this = this;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      url = '/schedule/' + scheduleKey + '/edit';
      checked = $("#check-enable-breaks").is(':checked');
      post_data = {
        enable_breaks: checked
      };
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/will/Dropbox/medderschedule/scripts/schedule_scripts2.iced"
        });
        $.post(url, post_data, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              response_data = arguments[0];
              status = arguments[1];
              return xhr = arguments[2];
            };
          })(),
          lineno: 14
        }));
        __iced_deferrals._fulfill();
      })(function() {
        console.log("Changed enable-breaks");
        return FullRerender(response_data);
      });
    });
  });

}).call(this);
